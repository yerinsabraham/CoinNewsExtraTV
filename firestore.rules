rules_version = '2';
// Updated rules for social verifications - 2025-09-30 (removed username validation)
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - allow own document access only
    match /users/{userId} {
      // Users can read/write their own documents
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow creating documents for authenticated users
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Social verifications subcollection
      match /social_verifications/{platform} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Social claims subcollection
      match /social_claims/{claimId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Transactions subcollection - allow users to read/write their own transactions
      match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
      }
      
      // Wallet subcollection
      match /wallets/{walletId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Rewards subcollection
      match /rewards/{rewardId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Token locks subcollection
      match /token_locks/{lockId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Rooms collection - authenticated users can create/update rooms
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if false; // No deletion allowed
    }
    
    // Rounds collection - users can read rounds they participate in
    match /rounds/{roundId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
    // Joins collection - users can read their own joins
    match /joins/{joinId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uid;
    }
    
    // Timed rounds collection - users can read and Cloud Functions can write
    match /timedRounds/{roundId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow Cloud Functions to create
      allow update: if request.auth != null; // Allow Cloud Functions to update
    }
    
    // Battle results - read-only for participants
    match /battle_results/{resultId} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write results
    }
    
    // Videos collection - read-only for all authenticated users
    match /videos/{videoId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins/Cloud Functions can write
    }
    
    // Live videos collection - read-only for all authenticated users
    match /live_videos/{videoId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins/Cloud Functions can write
    }
    
    // System configuration - read-only for authenticated users
    match /system/{configId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins/Cloud Functions can write
    }
    
    // Reward system configuration - read-only for authenticated users
    match /reward_config/{configId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins/Cloud Functions can write
    }
    
    // Global stats - read-only for authenticated users
    match /stats/{statId} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Referral codes - users can read their own and create new ones
    match /referral_codes/{codeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Admin verification queue - restricted access
    match /verification_queue/{verificationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if false; // Only Cloud Functions/admins can update
    }
    
    // Admin collection - restricted access
    match /admins/{adminId} {
      allow read: if request.auth != null;
      // Allow users to create their own admin document (for testing/setup)
      allow create: if request.auth != null && request.auth.uid == adminId;
      // Allow super admins to update admin documents
      allow update: if request.auth != null && 
        request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com'];
      allow delete: if false;
    }
    
    // Admin notifications collection - all users can read notifications, only admins can create/modify
    match /admin_notifications/{notificationId} {
      allow read: if request.auth != null; // All authenticated users can read notifications
      allow create: if request.auth != null; // Allow any authenticated user to create (will check admin status in app)
      allow update: if request.auth != null; // Allow users to update readBy field and admins to modify
      allow delete: if request.auth != null && 
        request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com'];
    }
    
    // Battles/rounds collection - users can read battles they participate in
    match /rounds/{roundId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
    }
    
    // Username availability collection - for username uniqueness checks
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if false; // Only system can update
      allow delete: if false; // Only system can delete
    }
    
    // Rewards log - allow users to read their own rewards
    match /rewards_log/{logId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if false; // Only Cloud Functions can create
      allow update, delete: if false; // Only Cloud Functions can modify
    }
    
    // Redemptions - allow users to read their own redemptions
    match /redemptions/{redemptionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if false; // Only Cloud Functions can modify
    }
    
    // Pending transfers - allow users to read their own transfers
    match /pending_transfers/{transferId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if false; // Only Cloud Functions can modify
    }
    
    // Admin actions - read-only audit log
    match /admin_actions/{actionId} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Custodial wallets - users can read/write their own wallet data
    match /custodial_wallets/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Token associations - users can read their own, system can create
    match /token_associations/{associationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow wallet creation to associate tokens
      allow update, delete: if false; // Only system can modify
    }
    
    // Wallet funding records - users can read their own funding history
    match /wallet_funding/{fundingId} {
      allow read: if request.auth != null; // Allow users to read funding records
      allow create: if request.auth != null; // Allow system to fund wallets
      allow update, delete: if false; // Only system can modify
    }
    
    // Wallet audit log - read-only audit trail
    match /wallet_audit_log/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow wallet creation to log
      allow update, delete: if false; // Only system can modify
    }
    
    // User balances - users can read/write their own balance data
    match /user_balances/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reward logs - users can read their own rewards, system can create
    match /reward_logs/{rewardId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; // Allow system to create rewards
      allow update, delete: if false; // Only system can modify
    }
    
    // Transfer log - system can create, users can read their own
    match /transfer_log/{transferId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow system to create transfers
      allow update, delete: if false; // Only system can modify
    }
    
    // Admin log - system only
    match /admin_log/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow system to create logs
      allow update, delete: if false; // Only system can modify
    }
    
    // Chat messages - allow authenticated users to read all and create their own
    match /chat_messages/{messageId} {
      allow read: if request.auth != null; // All authenticated users can read chat
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId; // Users can create their own messages
      allow update, delete: if false; // No editing/deleting messages
    }
    
    // Earnings subcollection under users - allow users to read/write their own earnings
    match /users/{userId}/earnings/{earningId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Support system collections
    // Support tickets - users can read/write their own tickets, admins can read all
    match /support_tickets/{ticketId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
      allow list: if request.auth != null && 
        request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com'];
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
    }
    
    // Support chats - users can read/write/delete their own chats, admins can read all
    match /support_chats/{chatId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
    }
    
    // Support calls - users can read/write their own calls, admins can read all
    match /support_calls/{callId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com']);
    }
    
    // Chat messages for support - users can read messages in their chats, admins can read all
    match /support_chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if false; // No editing messages
      allow delete: if request.auth != null; // Allow deleting messages when deleting chat
    }
    
    // Spotlight items collection - users can read active items, admins can manage all
    match /spotlight_items/{itemId} {
      // All authenticated users can read active spotlight items
      allow read: if request.auth != null && resource.data.isActive == true;
      // Admins can read all spotlight items (including inactive ones)
      allow read: if request.auth != null && 
        request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com'];
      // Only admins can create, update, or delete spotlight items
      allow create, update, delete: if request.auth != null && 
        request.auth.email in ['yerinssaibs@gmail.com', 'elitepr@coinnewsextra.com'];
    }
    
    // Quiz progress collection - users can read/write their own quiz progress
    match /quiz_progress/{progressId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // No updating/deleting quiz progress
    }
  }
}
